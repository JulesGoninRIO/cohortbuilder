digraph "classes" {
rankdir=BT
charset="utf-8"
"abc.ABC" [color="black", fontcolor="black", label="{ABC|\l|}", shape="record", style="solid"];
"_py_abc.ABCMeta" [color="black", fontcolor="black", label="{ABCMeta|\l|register(subclass)\l}", shape="record", style="solid"];
"abc.ABCMeta" [color="black", fontcolor="black", label="{ABCMeta|\l|register(subclass)\l}", shape="record", style="solid"];
"src.discovery.file.Acquisition" [color="black", fontcolor="black", label="{Acquisition|discovery\lfile\lisended\lissuccessful\ljobs : Optional[list[dict]], list\lprocesses : dict[DiscoveryTask, bool]\lstatus : NONE, Optional[DiscoveryDatasetStatus], NoneType\luuid : str\l|fetch(status: bool): None\lreprocess(): None\l}", shape="record", style="solid"];
"src.files.DicomTag.AcquisitionContextSequence" [color="black", fontcolor="black", label="{AcquisitionContextSequence|name\l|}", shape="record", style="solid"];
"src.files.DicomTag.AcquisitionDeviceTypeCodeSequence" [color="black", fontcolor="black", label="{AcquisitionDeviceTypeCodeSequence|name\l|}", shape="record", style="solid"];
"src.managers.AllThreadsDeadException" [color="black", fontcolor="red", label="{AllThreadsDeadException|\l|}", shape="record", style="solid"];
"src.files.DicomTag.AnatomicRegionSequence" [color="black", fontcolor="black", label="{AnatomicRegionSequence|name\l|}", shape="record", style="solid"];
"src.files.DicomTag.SharedFunctionalGroupsSequence.FrameAnatomySequence.AnatomicRegionSequence" [color="black", fontcolor="black", label="{AnatomicRegionSequence|name\l|}", shape="record", style="solid"];
"src.discovery.exceptions.BadGatewayException" [color="black", fontcolor="red", label="{BadGatewayException|\l|}", shape="record", style="solid"];
"src.discovery.exceptions.BadRequestException" [color="black", fontcolor="red", label="{BadRequestException|\l|}", shape="record", style="solid"];
"src.cohortbuilder.tools.definitions.Biomarker" [color="black", fontcolor="black", label="{Biomarker|name\l|get_names(): list[str]\lget_tags(): list[str]\lget_titles(): list[str]\l}", shape="record", style="solid"];
"src.builder.Builder" [color="black", fontcolor="black", label="{Builder|configs : dict\ldiscovery\ldownloader : Optional[DownloadManager]\lproject\lquery_builder\l|askcontinue(): bool\lbuild(): None\lcheck_duplicates(): None\lcreate_folders(): bool\lget_metadata(): None\l}", shape="record", style="solid"];
"src.taxonomy.CFIClassifier" [color="black", fontcolor="black", label="{CFIClassifier|layer\ln_images : int\l|classify(): list[str]\l}", shape="record", style="solid"];
"src.discovery.entities.ChildLayer" [color="black", fontcolor="black", label="{ChildLayer|all : Optional[bool]\lcreate_pbar : bool\lfolder : Path\lparent\lpbar : tqdm\lrem : Optional[int]\l|copy(): None\ldownload(downloader: DownloadManager): None\lextend(): None\lget_children(): None\lpost_filter(configs: dict): bool\lpre_filter(configs: dict): bool\l}", shape="record", style="solid"];
"src.managers.Client" [color="black", fontcolor="black", label="{Client|hostname\lkey\lkeytype\lopen_sftp : bool\lpassword\lport\lsftp : SFTPClient, NoneType\lssh : SSHClient\lusername\l|close(): None\lconnect(): paramiko.SSHClient\lisalive(): bool\lrefresh(): None\lrun(command: str): Tuple[ChannelFile, ChannelStderrFile]\l}", shape="record", style="solid"];
"src.cohortbuilder.tools.cohort.Cohort" [color="black", fontcolor="black", label="{Cohort|dir : Path\lpatients : Optional[dict], dict\l|browse(fovea: bool, cvi_cube: bool, cvi_line: bool, tvs: bool, pachy: bool, dscore: bool, dicom_retina_ONH_tag: bool, dicom_coord: bool, file: Union[str, pathlib.Path], checkpoint: bool, indent: int, prec: str)\lexport(builder: Callable[[dict], list], columns: list): pd.DataFrame\lload(file: Union[str, pathlib.Path]): None\l}", shape="record", style="solid"];
"src.cohortbuilder.tools.cohort.CohortDataset" [color="black", fontcolor="black", label="{CohortDataset|\l|plot_vectors(file: Union[str, pathlib.Path], idx): Union[None, plt.Figure]\l}", shape="record", style="solid"];
"src.files.DicomTag.ContrastBolusAgentSequence.ContrastAdministrationProfileSequence" [color="black", fontcolor="black", label="{ContrastAdministrationProfileSequence|name\l|}", shape="record", style="solid"];
"src.files.DicomTag.ContrastBolusAgentSequence.ContrastBolusAdministrationRouteSequence" [color="black", fontcolor="black", label="{ContrastBolusAdministrationRouteSequence|name\l|}", shape="record", style="solid"];
"src.files.DicomTag.ContrastBolusAgentSequence" [color="black", fontcolor="black", label="{ContrastBolusAgentSequence|name\l|}", shape="record", style="solid"];
"src.managers.DataBase" [color="black", fontcolor="black", label="{DataBase|connection\ldriver : str\lname : str\lserver : str\l|send(query: str, chunksize: int): Union[pd.DataFrame, Generator(pd.DataFrame)]\l}", shape="record", style="solid"];
"src.discovery.entities.Dataset" [color="black", fontcolor="black", label="{Dataset|acquisition\lall : bool\lchildren : list[Union[Layer, ChildLayer]]\lcreate_pbar : bool\ldownloaded : Path\linfo : dict\llastrefreshed : float\lparent\lpbar : Optional[Union[None, tqdm.tqdm]]\lrefreshinprogress : bool\lrem : int\lurls : dict[str, str], dict\l|build_urls(attributes: dict): dict[str, str]\lcopy(target: str): None\ldownload(downloader: DownloadManager, pbar: Union[None, tqdm.tqdm]): None\lexport_json(): None\lextend(): None\lget_children(): list[Union[Layer, ChildLayer]]\lget_url(uuid: str, force: bool): Union[str, None]\lpost_filter(configs: dict): bool\lpre_filter(configs: dict): bool\lrefresh_urls(force: bool): None\lreprocess(): None\lupload(target: str): None\l}", shape="record", style="solid"];
"src.files.DicomFile" [color="black", fontcolor="black", label="{DicomFile|metadata\lreplace_phrase : str\l|anonymize(hide_patient_sex: bool): None\lcreate(images: list[np.ndarray], info: dict, template: Union[str, pathlib.Path]): pydicom.FileDataset\lgettag(ds: Dataset, tag: DicomTagEnum, base: DicomTagEnum): DataElement\lispdf(): bool\lreadtag(ds: Dataset, tag: DicomTagEnum, base: DicomTagEnum): Any\lrectify(): None\lsettag(ds: Dataset, tag: DicomTagEnum, value: Any, base: DicomTagEnum): None\ltemplate(pixeldata: bool, patientinfo: bool): pydicom.FileDataset\l}", shape="record", style="solid"];
"src.files.DicomTag" [color="black", fontcolor="black", label="{DicomTag|name\l|}", shape="record", style="solid"];
"src.files.DicomTagEnum" [color="black", fontcolor="black", label="{DicomTagEnum|id\lname\lparents\lpath\l|}", shape="record", style="solid"];
"src.files.DicomTagEnumMeta" [color="black", fontcolor="black", label="{DicomTagEnumMeta|\l|}", shape="record", style="solid"];
"src.files.DicomTag.DimensionIndexSequence" [color="black", fontcolor="black", label="{DimensionIndexSequence|name\l|}", shape="record", style="solid"];
"src.files.DicomTag.DimensionOrganizationSequence" [color="black", fontcolor="black", label="{DimensionOrganizationSequence|name\l|}", shape="record", style="solid"];
"src.discovery.discovery.Discovery" [color="black", fontcolor="black", label="{Discovery|instance : str\lsettings : dict\ltoken : Optional[Token]\l|download(url: Union[str, None], out: Union[pathlib.Path, str]): Union[None, io.BytesIO]\lget_files(n: int): list[str]\lget_token(): None\lsend_query(query: str, variables: dict, name: str): dict\lupload(file: Union[pathlib.Path, str], uuid: str): dict\l}", shape="record", style="solid"];
"src.discovery.definitions.DiscoveryDatasetPurpose" [color="black", fontcolor="black", label="{DiscoveryDatasetPurpose|name\l|}", shape="record", style="solid"];
"src.discovery.definitions.DiscoveryDatasetStatus" [color="black", fontcolor="black", label="{DiscoveryDatasetStatus|isended\lissuccessful\lname\l|}", shape="record", style="solid"];
"src.discovery.file.DiscoveryFile" [color="black", fontcolor="black", label="{DiscoveryFile|acquisitions : Optional[list[Acquisition]], list\ldiscovery\lextension : Optional[str]\lisended\lissuccessful\lisuploaded\lname : Optional[str]\lstatus : Optional[DiscoveryFileStatus], PENDING\luuid : str\l|fetch(acquisitions: bool): None\lreprocess(): bool\l}", shape="record", style="solid"];
"src.discovery.definitions.DiscoveryFileStatus" [color="black", fontcolor="black", label="{DiscoveryFileStatus|isended\lisuploaded\lname\l|}", shape="record", style="solid"];
"src.discovery.definitions.DiscoveryJobStatus" [color="black", fontcolor="black", label="{DiscoveryJobStatus|name\l|}", shape="record", style="solid"];
"src.discovery.manager.DiscoveryManager" [color="black", fontcolor="black", label="{DiscoveryManager|discoveries : dict[str, Discovery]\linstances : set[list[str]]\lpauser\lreprocesser : Optional[ReprocessManager]\luploader : Optional[UploadManager]\lworkbooks\l|get_project_uuid(discovery: Discovery, name: str): str\lreprocess(acquisitions: list[Acquisition]): None\lupload(files: list[DicomFile], anonymize: list[str]): None\l}", shape="record", style="solid"];
"src.discovery.definitions.DiscoveryTask" [color="black", fontcolor="black", label="{DiscoveryTask|name\l|}", shape="record", style="solid"];
"src.discovery.definitions.DiscoveryTaskStatus" [color="black", fontcolor="black", label="{DiscoveryTaskStatus|isultimate\lname\l|}", shape="record", style="solid"];
"src.managers.DownloadManager" [color="black", fontcolor="black", label="{DownloadManager|configs : Optional[dict]\l|add(dataset: Dataset, url_uuid: str, out: Union[str, pathlib.Path]): None\ldownload(dataset: Dataset, url_uuid: str, out: Union[pathlib.Path, str]): None\lprocess(item: Tuple[Dataset, str, Union[pathlib.Path, str]], idx_thread: int): None\l}", shape="record", style="solid"];
"src.discovery.entities.Entity" [color="black", fontcolor="black", label="{Entity|all : bool\lattributes : dict\lchildren : Optional[list[Entity]]\lcreate_pbar : bool\ldiscovery\ldownloaded : Path\lfolder : Path\lparent\lpbar : Optional[Union[None, tqdm.tqdm]], tqdm\lrem : int\luuid : str\l|copy(): None\ldownload(downloader: DownloadManager, pbar: Union[None, tqdm.tqdm]): None\llog_filtered_out(reason: str): None\lpost_filter(configs: dict): bool\lpre_filter(configs: dict): bool\lupdate(): None\l}", shape="record", style="solid"];
"enum.Enum" [color="black", fontcolor="black", label="{Enum|\l|name()\lvalue()\l}", shape="record", style="solid"];
"enum.EnumMeta" [color="black", fontcolor="black", label="{EnumMeta|\l|}", shape="record", style="solid"];
"oct_converter.readers.fda.FDA" [color="black", fontcolor="black", label="{FDA|chunk_dict : dict\lfilepath : Path\l|get_list_of_file_chunks(printing)\lread_any_info_and_make_dict(chunk_name)\lread_fundus_image()\lread_fundus_image_gray_scale()\lread_oct_volume()\lread_oct_volume_2()\lread_segmentation()\l}", shape="record", style="solid"];
"src.files.FdaFile" [color="black", fontcolor="black", label="{FdaFile|chunk_dict : dict\lcontours : NoneType\lfailed_keys : list, Optional[list]\lfilepath : Path\lfundus : ndarray\lfundus_gs : ndarray\lis_read : bool\lmetadata : dict, Optional[dict]\lvolume : ndarray, Optional[list[np.ndarray]]\lvolume_2 : ndarray, Optional[list[np.ndarray]]\l|get_dicom(template: Union[str, pathlib.Path], laterality: Literal['R', 'L'], patient_sex: str, patient_dob: str, spacing: list[float], thickness: float, datetime_study: datetime): pydicom.FileDataset\lread(): None\l}", shape="record", style="solid"];
"src.files.File" [color="black", fontcolor="black", label="{File|cache\lcopied : Union[str, pathlib.Path], NoneType, Path\ldiscovery : dict[str, DiscoveryFile]\lmode : Literal['local', 'remote']\lname : str\lpath : Union[None, str, pathlib.Path]\lstatus\l|copy(target: Union[str, pathlib.Path]): None\lexists(client: Client): bool\lget(client: Client, target: Union[str, pathlib.Path]): None\llog_status_changed(message: str): None\lremove(): None\lupload(workbook: Workbook): None\l}", shape="record", style="solid"];
"src.files.DicomTag.SharedFunctionalGroupsSequence.FrameAnatomySequence" [color="black", fontcolor="black", label="{FrameAnatomySequence|name\l|}", shape="record", style="solid"];
"src.files.DicomTag.PerFrameFunctionalGroupsSequence.FrameContentSequence" [color="black", fontcolor="black", label="{FrameContentSequence|name\l|}", shape="record", style="solid"];
"src.taxonomy.FundusClassifier" [color="black", fontcolor="black", label="{FundusClassifier|layer\ln_images : int\lparent_file : NoneType, str\l|classify(): list[str]\lextract_from_dcm(): list[str]\lget_angio_variant(img: np.ndarray, threshold: float): Literal[LayerVariant.F_AFIR, LayerVariant.F_ANGIO, LayerVariant.F_OTHER]\lget_variant_from_dcm(file: BinaryIO): list[LayerVariant]\linfra_or_auto(img: np.ndarray): Literal[LayerVariant.F_AUTOFLUO, LayerVariant.F_INFRARED]\l}", shape="record", style="solid"];
"src.discovery.exceptions.GatewayTimeoutException" [color="black", fontcolor="red", label="{GatewayTimeoutException|\l|}", shape="record", style="solid"];
"src.managers.HeyexMetadataManager" [color="black", fontcolor="black", label="{HeyexMetadataManager|DIR : Path\linitialized : bool\lmetadata : Path\lregister : Path\l|explore(patients: list[PatientManager], filter_consent: bool, filter_inconsistent: bool, update: bool): list[dict]\lfind_inconsistent_pids(): None\linit()\lupdate(): None\l}", shape="record", style="solid"];
"src.builder.InvalidConfigsException" [color="black", fontcolor="red", label="{InvalidConfigsException|field : Optional[str]\lmessage : Optional[str]\l|}", shape="record", style="solid"];
"src.discovery.exceptions.InvalidCredentialsException" [color="black", fontcolor="red", label="{InvalidCredentialsException|\l|}", shape="record", style="solid"];
"src.discovery.entities.Layer" [color="black", fontcolor="black", label="{Layer|all : Optional[bool]\lcreate_pbar : bool\lfolder : Path\lparent\lpbar : tqdm\lrem : Optional[int]\l|copy(): None\ldownload(downloader: DownloadManager): None\lextend(): None\lget_children(): None\lget_taxonomy(): None\lpost_filter(configs: dict): bool\lpre_filter(configs: dict): bool\l}", shape="record", style="solid"];
"src.discovery.definitions.LayerType" [color="black", fontcolor="black", label="{LayerType|name\l|}", shape="record", style="solid"];
"src.discovery.definitions.LayerVariant" [color="black", fontcolor="black", label="{LayerVariant|name\l|OCT_variants(): set[LayerVariant]\lfundus_variants(): set[LayerVariant]\lfundus_variants_added(): set[LayerVariant]\l}", shape="record", style="solid"];
"src.managers.MaximumThreadsReachedException" [color="black", fontcolor="red", label="{MaximumThreadsReachedException|\l|}", shape="record", style="solid"];
"src.managers.MultiThreader" [color="black", fontcolor="black", label="{MultiThreader|T : T\l|execute(): None\lprocess(item: T, idx_thread: int): None\lput(items: list): None\l}", shape="record", style="solid"];
"src.discovery.exceptions.NoUrlPassedException" [color="black", fontcolor="red", label="{NoUrlPassedException|\l|}", shape="record", style="solid"];
"src.files.DicomTag.PerFrameFunctionalGroupsSequence.OphthalmicFrameLocationSequence" [color="black", fontcolor="black", label="{OphthalmicFrameLocationSequence|name\l|}", shape="record", style="solid"];
"src.parser.Parser" [color="black", fontcolor="black", label="{Parser|args : Namespace\lcohorts_dir : Path\lconfigs\lconfigs : Optional[dict]\lconfigs_dir : Path\lparams : Optional[dict]\lsettings : Optional[dict]\l|check_args(): argparse.Namespace\lcheck_settings(): dict\lstore(args: argparse.Namespace, settings: dict): None\l}", shape="record", style="solid"];
"src.discovery.entities.Patient" [color="black", fontcolor="black", label="{Patient|children : list, list[Study]\ldatasetcount\ldownloaded : Path\lparent\l|copy(target: str): None\lfilter(configs: dict): None\lget_acquisitions(fetch: bool, n_threads: int, verbose: bool): list[Acquisition]\lget_children(): list[Study]\lpost_filter(configs: dict): bool\lpre_filter(configs: dict): bool\l}", shape="record", style="solid"];
"src.files.DicomTag.PatientEyeMovementCommandCodeSequence" [color="black", fontcolor="black", label="{PatientEyeMovementCommandCodeSequence|name\l|}", shape="record", style="solid"];
"src.managers.PatientManager" [color="black", fontcolor="black", label="{PatientManager|TESTPID : str\lcgpid : str\lconsent : NoneType, str\lslimsid : str, NoneType\l|fetch_slims(): Tuple[str, str]\lhas_consent(): bool\lis_inconsistent(inconsistent_pids: list): bool\llog_filtered_out(reason: str): None\l}", shape="record", style="solid"];
"src.cohortbuilder.utils.pauser.Pauser" [color="black", fontcolor="black", label="{Pauser|paused : bool\l|pause(): bool\l}", shape="record", style="solid"];
"src.files.DicomTag.PerFrameFunctionalGroupsSequence" [color="black", fontcolor="black", label="{PerFrameFunctionalGroupsSequence|name\l|}", shape="record", style="solid"];
"src.files.DicomTag.SharedFunctionalGroupsSequence.PixelMeasuresSequence" [color="black", fontcolor="black", label="{PixelMeasuresSequence|name\l|}", shape="record", style="solid"];
"src.files.DicomTag.SharedFunctionalGroupsSequence.PlaneOrientationSequence" [color="black", fontcolor="black", label="{PlaneOrientationSequence|name\l|}", shape="record", style="solid"];
"src.files.DicomTag.PerFrameFunctionalGroupsSequence.PlanePositionSequence" [color="black", fontcolor="black", label="{PlanePositionSequence|name\l|}", shape="record", style="solid"];
"src.discovery.entities.Project" [color="black", fontcolor="black", label="{Project|all\lchildren : list[Workbook], list[str]\ldiscovery\ldownloaded : Path\lfolder : Path\lname : str\lrem : int\luuid : str\l|get_children(): list[Workbook]\l}", shape="record", style="solid"];
"src.files.DicomTag.SharedFunctionalGroupsSequence.ReferencedImageSequence.PurposeOfReferenceCodeSequence" [color="black", fontcolor="black", label="{PurposeOfReferenceCodeSequence|name\l|}", shape="record", style="solid"];
"src.discovery.queries.QueryBuilder" [color="black", fontcolor="black", label="{QueryBuilder|Q_CHILDREN : str\lQ_END : str\lQ_LAYERS : str\lQ_START : str\lquery : StringIO\l|build(configs: dict): None\lread_query(): str\l}", shape="record", style="solid"];
"src.managers.QueueManager" [color="black", fontcolor="black", label="{QueueManager|isalive\lkill_flag : bool\llimited : bool\lname : str\lq : Queue\lthreads : list[Thread]\lverbose : bool\l|clear(): None\ldead(): None\ljoin(): None\lkill(join: bool): None\llaunch(): None\lprocess(item: tuple, idx_thread: int): None\l}", shape="record", style="solid"];
"src.files.DicomTag.SharedFunctionalGroupsSequence.ReferencedImageSequence" [color="black", fontcolor="black", label="{ReferencedImageSequence|name\l|}", shape="record", style="solid"];
"src.cohortbuilder.tools.definitions.Region" [color="black", fontcolor="black", label="{Region|name\l|central(): list[Region]\lget_names(): list[str]\lget_titles(): list[str]\lpericentral(): list[Region]\lperipheral(): list[Region]\l}", shape="record", style="solid"];
"src.managers.ReprocessManager" [color="black", fontcolor="black", label="{ReprocessManager|\l|add(acquisition: Acquisition, pbar: tqdm.tqdm): None\lprocess(item: Tuple[Acquisition, tqdm.tqdm], idx_thread: int): None\l}", shape="record", style="solid"];
"src.discovery.exceptions.RequestExpiredException" [color="black", fontcolor="red", label="{RequestExpiredException|\l|}", shape="record", style="solid"];
"src.discovery.exceptions.RequestMaxAttemptsReached" [color="black", fontcolor="red", label="{RequestMaxAttemptsReached|\l|}", shape="record", style="solid"];
"src.cohortbuilder.tools.definitions.RetinalLayer" [color="black", fontcolor="black", label="{RetinalLayer|name\l|get_names(plus: bool): list[str]\lget_names_fluids(plus: bool): list[str]\lget_names_layers(plus: bool): list[str]\lget_tags(): list[str]\lget_titles(): list[str]\l}", shape="record", style="solid"];
"src.files.DicomTag.SharedFunctionalGroupsSequence" [color="black", fontcolor="black", label="{SharedFunctionalGroupsSequence|name\l|}", shape="record", style="solid"];
"src.taxonomy.SideClassifier" [color="black", fontcolor="black", label="{SideClassifier|\l|side_predict(img: np.ndarray, ridges: np.ndarray): Literal[LayerVariant.F_RETINA, LayerVariant.F_ONH]\l}", shape="record", style="solid"];
"src.discovery.entities.Study" [color="black", fontcolor="black", label="{Study|children : list[Dataset]\lcreate_pbar : bool\ldownloaded : Path\lparent\l|copy(target: str): None\lget_children(): list[Dataset]\lpost_filter(configs: dict): bool\lpre_filter(configs: dict): bool\l}", shape="record", style="solid"];
"src.discovery.discovery.Token" [color="black", fontcolor="black", label="{Token|access_token : NoneType, Optional[str]\lrefresh_token : NoneType, Optional[str]\lsettings : dict\lstatus : NoneType, str, Optional[str]\lurl : str\l|get_mfa(mfa_code: str): None\lrefresh(): None\lrefresh_old(): None\lreset(): None\l}", shape="record", style="solid"];
"src.discovery.exceptions.TokenRefreshMaxAttemptsReached" [color="black", fontcolor="red", label="{TokenRefreshMaxAttemptsReached|\l|}", shape="record", style="solid"];
"src.discovery.exceptions.TokenTimeoutException" [color="black", fontcolor="red", label="{TokenTimeoutException|\l|}", shape="record", style="solid"];
"src.discovery.exceptions.UnauthorizedCallException" [color="black", fontcolor="red", label="{UnauthorizedCallException|\l|}", shape="record", style="solid"];
"src.discovery.exceptions.UnknownStatusCodeException" [color="black", fontcolor="red", label="{UnknownStatusCodeException|\l|}", shape="record", style="solid"];
"src.managers.UploadManager" [color="black", fontcolor="black", label="{UploadManager|cache_dir\linstances : set[str]\lworkbooks_anm : list[Workbook]\lworkbooks_raw : list[Workbook]\l|add(file: DicomFile, pbar: tqdm.tqdm): None\lprocess(item: Tuple[DicomFile, tqdm.tqdm], idx_thread: int): None\l}", shape="record", style="solid"];
"src.definitions.UploadPipelineFileStatus" [color="black", fontcolor="black", label="{UploadPipelineFileStatus|name\l|}", shape="record", style="solid"];
"src.builder.Uploader" [color="black", fontcolor="black", label="{Uploader|CACHE_DIR\lconfigs : dict\linstances : list[str]\lproject : str\lsuccess : bool\lworkbooks : list[str]\l|filter_files(uploadfiles: list[DicomFile]): list[DicomFile]\lget_upload_files(pids: list[Union[str, int]], pidsfile: Union[pathlib.Path, str], updatemetadata: bool, copyfiles: bool): list[DicomFile]\lupload(uploadfiles: list[DicomFile]): None\l}", shape="record", style="solid"];
"src.discovery.exceptions.UrlNotFoundException" [color="black", fontcolor="red", label="{UrlNotFoundException|\l|}", shape="record", style="solid"];
"src.discovery.entities.Workbook" [color="black", fontcolor="black", label="{Workbook|all : bool\lchildren : list[Patient], list\ldatasetcount\ldatasets : list[Dataset]\ldownloaded : Path\lfiles : list[DiscoveryFile]\lparent\lpbar : Optional[Union[None, tqdm.tqdm]]\lrem : int\l|clear(): None\ldownload(downloader: DownloadManager, pbar: Union[None, tqdm.tqdm]): None\lget_acquisitions(separate: bool, verbose: bool): dict[str, list[Acquisition]]\lget_children(): list[Patient]\lget_files(pbar: tqdm.tqdm): list[DiscoveryFile]\lload(): None\lpost_filter(configs: dict): bool\lpre_filter(configs: dict): bool\lsave(): None\l}", shape="record", style="solid"];
"src.definitions.UploadPipelineFileStatus" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"src.discovery.definitions.DiscoveryDatasetPurpose" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"src.discovery.definitions.DiscoveryDatasetStatus" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"src.discovery.definitions.DiscoveryFileStatus" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"src.discovery.definitions.DiscoveryJobStatus" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"src.discovery.definitions.DiscoveryTask" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"src.discovery.definitions.DiscoveryTaskStatus" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"src.discovery.definitions.LayerType" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"src.discovery.definitions.LayerVariant" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"src.discovery.entities.ChildLayer" -> "src.discovery.entities.Entity" [arrowhead="empty", arrowtail="none"];
"src.discovery.entities.Dataset" -> "src.discovery.entities.Entity" [arrowhead="empty", arrowtail="none"];
"src.discovery.entities.Entity" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"src.discovery.entities.Layer" -> "src.discovery.entities.Entity" [arrowhead="empty", arrowtail="none"];
"src.discovery.entities.Patient" -> "src.discovery.entities.Entity" [arrowhead="empty", arrowtail="none"];
"src.discovery.entities.Study" -> "src.discovery.entities.Entity" [arrowhead="empty", arrowtail="none"];
"src.discovery.entities.Workbook" -> "src.discovery.entities.Entity" [arrowhead="empty", arrowtail="none"];
"src.files.DicomFile" -> "src.files.File" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.AcquisitionContextSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.AcquisitionDeviceTypeCodeSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.AnatomicRegionSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.ContrastBolusAgentSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.ContrastBolusAgentSequence.ContrastAdministrationProfileSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.ContrastBolusAgentSequence.ContrastBolusAdministrationRouteSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.DimensionIndexSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.DimensionOrganizationSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.PatientEyeMovementCommandCodeSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.PerFrameFunctionalGroupsSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.PerFrameFunctionalGroupsSequence.FrameContentSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.PerFrameFunctionalGroupsSequence.OphthalmicFrameLocationSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.PerFrameFunctionalGroupsSequence.PlanePositionSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.SharedFunctionalGroupsSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.SharedFunctionalGroupsSequence.FrameAnatomySequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.SharedFunctionalGroupsSequence.FrameAnatomySequence.AnatomicRegionSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.SharedFunctionalGroupsSequence.PixelMeasuresSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.SharedFunctionalGroupsSequence.PlaneOrientationSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.SharedFunctionalGroupsSequence.ReferencedImageSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTag.SharedFunctionalGroupsSequence.ReferencedImageSequence.PurposeOfReferenceCodeSequence" -> "src.files.DicomTagEnum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTagEnum" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTagEnumMeta" -> "_py_abc.ABCMeta" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTagEnumMeta" -> "abc.ABCMeta" [arrowhead="empty", arrowtail="none"];
"src.files.DicomTagEnumMeta" -> "enum.EnumMeta" [arrowhead="empty", arrowtail="none"];
"src.files.FdaFile" -> "oct_converter.readers.fda.FDA" [arrowhead="empty", arrowtail="none"];
"src.files.FdaFile" -> "src.files.File" [arrowhead="empty", arrowtail="none"];
"src.managers.DownloadManager" -> "src.managers.QueueManager" [arrowhead="empty", arrowtail="none"];
"src.managers.MultiThreader" -> "src.managers.QueueManager" [arrowhead="empty", arrowtail="none"];
"src.managers.QueueManager" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"src.managers.ReprocessManager" -> "src.managers.QueueManager" [arrowhead="empty", arrowtail="none"];
"src.managers.UploadManager" -> "src.managers.QueueManager" [arrowhead="empty", arrowtail="none"];
"src.cohortbuilder.tools.definitions.Biomarker" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"src.cohortbuilder.tools.definitions.Region" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"src.cohortbuilder.tools.definitions.RetinalLayer" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"src.definitions.UploadPipelineFileStatus" -> "src.files.File" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"src.discovery.discovery.Discovery" -> "src.builder.Builder" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="discovery", style="solid"];
"src.discovery.discovery.Discovery" -> "src.discovery.entities.Entity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="discovery", style="solid"];
"src.discovery.discovery.Discovery" -> "src.discovery.entities.Project" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="discovery", style="solid"];
"src.discovery.discovery.Discovery" -> "src.discovery.file.DiscoveryFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="discovery", style="solid"];
"src.discovery.discovery.Token" -> "src.discovery.discovery.Discovery" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="token", style="solid"];
"src.discovery.entities.Dataset" -> "src.discovery.entities.ChildLayer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parent", style="solid"];
"src.discovery.entities.Dataset" -> "src.discovery.entities.Layer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parent", style="solid"];
"src.discovery.entities.Entity" -> "src.discovery.entities.Entity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parent", style="solid"];
"src.discovery.entities.Layer" -> "src.taxonomy.CFIClassifier" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="layer", style="solid"];
"src.discovery.entities.Layer" -> "src.taxonomy.FundusClassifier" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="layer", style="solid"];
"src.discovery.entities.Patient" -> "src.discovery.entities.Study" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parent", style="solid"];
"src.discovery.entities.Project" -> "src.builder.Builder" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"src.discovery.entities.Project" -> "src.discovery.entities.Workbook" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parent", style="solid"];
"src.discovery.entities.Study" -> "src.discovery.entities.Dataset" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parent", style="solid"];
"src.discovery.entities.Workbook" -> "src.discovery.entities.Patient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parent", style="solid"];
"src.discovery.file.Acquisition" -> "src.discovery.entities.Dataset" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="acquisition", style="solid"];
"src.discovery.file.DiscoveryFile" -> "src.discovery.file.Acquisition" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="file", style="solid"];
"src.discovery.queries.QueryBuilder" -> "src.builder.Builder" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="query_builder", style="solid"];
"src.managers.DownloadManager" -> "src.builder.Builder" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="downloader", style="solid"];
"src.managers.ReprocessManager" -> "src.discovery.manager.DiscoveryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reprocesser", style="solid"];
"src.managers.UploadManager" -> "src.discovery.manager.DiscoveryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uploader", style="solid"];
"src.cohortbuilder.utils.pauser.Pauser" -> "src.discovery.manager.DiscoveryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pauser", style="solid"];
}
